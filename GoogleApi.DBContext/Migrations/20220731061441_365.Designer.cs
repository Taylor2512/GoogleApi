// <auto-generated />
using System;
using GoogleApi.DBContext.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GoogleApi.DBContext.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220731061441_365")]
    partial class _365
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GoogleApi.Domain.Entities.Geoglobal.bounds", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id_northeast")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id_southwest")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id_northeast")
                        .IsUnique();

                    b.HasIndex("Id_southwest")
                        .IsUnique();

                    b.ToTable("tbl_bounds", (string)null);
                });

            modelBuilder.Entity("GoogleApi.Domain.Entities.Geoglobal.Cordenadas", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Longitud")
                        .IsUnicode(true)
                        .HasColumnType("float");

                    b.Property<double>("latitud")
                        .IsUnicode(true)
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("tbl_cordenada", (string)null);
                });

            modelBuilder.Entity("GoogleApi.Domain.Entities.Geoglobal.geometry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id_bounds")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id_location")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Id_location_type")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("Id_viewport")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("viewportId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id_bounds")
                        .IsUnique();

                    b.HasIndex("Id_location")
                        .IsUnique();

                    b.HasIndex("Id_location_type");

                    b.HasIndex("viewportId");

                    b.ToTable("tbl_geometry", (string)null);
                });

            modelBuilder.Entity("GoogleApi.Domain.Entities.Geoglobal.location_type", b =>
                {
                    b.Property<byte>("Id_location_type")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_location_type");

                    b.ToTable("location_type");
                });

            modelBuilder.Entity("GoogleApi.Domain.Entities.Geoglobal.bounds", b =>
                {
                    b.HasOne("GoogleApi.Domain.Entities.Geoglobal.Cordenadas", "northeast")
                        .WithOne("northeast")
                        .HasForeignKey("GoogleApi.Domain.Entities.Geoglobal.bounds", "Id_northeast")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_bounds_tbl_cordenada");

                    b.HasOne("GoogleApi.Domain.Entities.Geoglobal.Cordenadas", "southwest")
                        .WithOne("southwest")
                        .HasForeignKey("GoogleApi.Domain.Entities.Geoglobal.bounds", "Id_southwest")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_bounds_tbl_southwest2");

                    b.Navigation("northeast");

                    b.Navigation("southwest");
                });

            modelBuilder.Entity("GoogleApi.Domain.Entities.Geoglobal.geometry", b =>
                {
                    b.HasOne("GoogleApi.Domain.Entities.Geoglobal.bounds", "bounds")
                        .WithOne("geometry")
                        .HasForeignKey("GoogleApi.Domain.Entities.Geoglobal.geometry", "Id_bounds")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoogleApi.Domain.Entities.Geoglobal.Cordenadas", "location")
                        .WithOne("geometry")
                        .HasForeignKey("GoogleApi.Domain.Entities.Geoglobal.geometry", "Id_location")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoogleApi.Domain.Entities.Geoglobal.location_type", "location_Type")
                        .WithMany("geometry")
                        .HasForeignKey("Id_location_type")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoogleApi.Domain.Entities.Geoglobal.bounds", "viewport")
                        .WithMany()
                        .HasForeignKey("viewportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("bounds");

                    b.Navigation("location");

                    b.Navigation("location_Type");

                    b.Navigation("viewport");
                });

            modelBuilder.Entity("GoogleApi.Domain.Entities.Geoglobal.bounds", b =>
                {
                    b.Navigation("geometry")
                        .IsRequired();
                });

            modelBuilder.Entity("GoogleApi.Domain.Entities.Geoglobal.Cordenadas", b =>
                {
                    b.Navigation("geometry")
                        .IsRequired();

                    b.Navigation("northeast")
                        .IsRequired();

                    b.Navigation("southwest")
                        .IsRequired();
                });

            modelBuilder.Entity("GoogleApi.Domain.Entities.Geoglobal.location_type", b =>
                {
                    b.Navigation("geometry");
                });
#pragma warning restore 612, 618
        }
    }
}
